export const Op: { [key: string]: number } = {
    Jump : 0,
    END : 1,
    I8 : 2,
    I32 : 3,
    BOOL : 4,
    String : 5,
    JumpIfFalse : 6,
    JumpToBlock : 7,
    JumpToStart : 8,
    GetArguments : 9,

    //binary expressions
    LessThan : 10,
    LessThanOrEqual : 11,
    GreaterThan : 12,
    GreaterThanOrEqual : 13,
    EqualTo : 14,
    EqualToStrict : 15,
    NotEqualTo : 16,
    NotEqualToStrict : 17,
    Add : 18,
    Sub : 19,
    Divide : 20,
    Multiply : 21,
    Remainder : 22,
    BitAnd : 23,
    BitOr : 24,
    BitXOR : 25,
    BitLeftShift : 26,
    BitRightShift : 27,
    BitZeroFillRightShift : 28,
    RaiseExponent : 29,

    AssignValue : 30,
    AssignValueToGlobal : 31,
    GetVariableValue : 32,
    GetObjectProperty : 33,
    SetObjectProperty : 34,
    GetGlobalVariableValue : 35,
    CreateFunction : 36,
    Call : 37,
    ObjectPropertyCall : 38,
    ReturnValue : 39,
    RegisterString : 40,

    MakeArray : 41,
    MakeObject : 42,
    This : 43,
    GetArgs : 43,
    Debugger : 44,

    PlusPlus : 45,
    MinusMinus : 46,
    PropertyPlusPlus : 47,
    PropertyMinusMinus : 48,

    GlobalScope : 49,
    New : 50,

    Or : 51,
    And : 52,
    NotSymbol : 53,
    TypeOf : 54,
    NegateSymbol : 55,
    InstanceOf : 56,
    Throw : 57,
    Null : 58,
    In : 59,
    Delete : 60,
    MinusOutFront : 61,
    PlusOutFront : 62,
    Void : 63,
};

export const OpcodeString: { [key: number]: string } = {
    [Op.Jump] : "Jump",
    [Op.END] : "End",
    [Op.I8] : "Load I8",
    [Op.I32] : "Load I32",
    [Op.BOOL] : "Load Bool",
    [Op.String] : "Load String",
    [Op.JumpIfFalse] : "JumpIfFalse",
    [Op.JumpToBlock] : "JumpToBlock",
    [Op.JumpToStart] : "JumpToStart",
    [Op.GetArguments] : "GetArguments",

    //binary expressions
    [Op.LessThan] : "LessThan",
    [Op.LessThanOrEqual] : "LessThanOrEqual",
    [Op.GreaterThan] : "GreaterThan",
    [Op.GreaterThanOrEqual] : "GreaterThanOrEqual",
    [Op.EqualTo] : "EqualTo",
    [Op.EqualToStrict] : "EqualToStrict",
    [Op.NotEqualTo] : "NotEqualTo",
    [Op.NotEqualToStrict] : "NotEqualToStrict",
    [Op.Add] : "Add",
    [Op.Sub] : "Sub",
    [Op.Divide] : "Divide",
    [Op.Multiply] : "Multiply",
    [Op.Remainder] : "Remainder",
    [Op.BitAnd] : "BitAnd",
    [Op.BitOr] : "BitOr",
    [Op.BitXOR] : "BitXOR",
    [Op.BitLeftShift] : "BitLeftShift",
    [Op.BitRightShift] : "BitRightShift",
    [Op.BitZeroFillRightShift] : "BitZeroFillRightShift",
    [Op.RaiseExponent] : "RaiseExponent",

    [Op.AssignValue] : "AssignValue",
    [Op.AssignValueToGlobal] : "AssignValueToGlobal",
    [Op.GetVariableValue] : "GetVariableValue",
    [Op.GetObjectProperty] : "GetObjectProperty",
    [Op.SetObjectProperty] : "SetObjectProperty",
    [Op.GetGlobalVariableValue] : "GetGlobalVariableValue",
    [Op.CreateFunction] : "CreateFunction",
    [Op.Call] : "Call",
    [Op.ObjectPropertyCall] : "ObjectPropertyCall",
    [Op.ReturnValue] : "ReturnValue",
    [Op.RegisterString] : "RegisterString",

    [Op.MakeArray] : "MakeArray",
    [Op.MakeObject] : "MakeObject",
    [Op.This] : "This",
    [Op.GetArgs] : "GetArgs",
    [Op.Debugger] : "Debugger",

    [Op.PlusPlus] : "PlusPlus",
    [Op.MinusMinus] : "MinusMinus",
    [Op.PropertyPlusPlus] : "PropertyPlusPlus",
    [Op.PropertyMinusMinus] : "PropertyMinusMinus",

    [Op.GlobalScope] : "GlobalScope",
    [Op.New] : "New",

    [Op.Or] : "Or",
    [Op.And] : "And",
    [Op.NotSymbol] : "NotSymbol",
    [Op.TypeOf] : "TypeOf",
    [Op.NegateSymbol] : "NegateSymbol",
    [Op.InstanceOf] : "InstanceOf",
    [Op.Throw] : "Throw",
    [Op.Null] : "Null",
    [Op.In] : "In",
    [Op.Delete] : "Delete",
    [Op.MinusOutFront] : "MinusOutFront",
    [Op.PlusOutFront] : "PlusOutFront",
    [Op.Void] : "Void",
};